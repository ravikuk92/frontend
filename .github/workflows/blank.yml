name: Deploy Nginx to EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: ravik92/nginx:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Describe EC2 instance
      id: describe_ec2
      run: |
        INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ secrets.EC2_INSTANCE_NAME }}" --query "Reservations[0].Instances[0].InstanceId" --output text)
        echo "::set-output name=INSTANCE_ID::$INSTANCE_ID"

    - name: Start EC2 instance
      id: start_ec2
      run: |
        aws ec2 start-instances --instance-ids ${{ steps.describe_ec2.outputs.INSTANCE_ID }}
        aws ec2 wait instance-running --instance-ids ${{ steps.describe_ec2.outputs.INSTANCE_ID }}

    - name: Get EC2 public IP
      id: get_ip
      run: |
        IP=$(aws ec2 describe-instances --instance-ids ${{ steps.describe_ec2.outputs.INSTANCE_ID }} --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
        echo "::set-output name=EC2_PUBLIC_IP::$IP"

    - name: Wait for SSH
      run: |
        for i in {1..10}; do
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${{ secrets.EC2_USER }}@${{ steps.get_ip.outputs.EC2_PUBLIC_IP }} 'echo SSH connection established' && break
          sleep 10
        done

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Copy docker-compose.yml to EC2
      run: |
        scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.EC2_USER }}@${{ steps.get_ip.outputs.EC2_PUBLIC_IP }}:/home/${{ secrets.EC2_USER }}/docker-compose.yml

    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ steps.get_ip.outputs.EC2_PUBLIC_IP }} << 'EOF'
        docker-compose -f /home/${{ secrets.EC2_USER }}/docker-compose.yml up -d
        EOF
