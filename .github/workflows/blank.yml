name: Deploy Dockerized App

on:
  push:
    branches:
      - mainss

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build . -t ${{ secrets.DOCKER_USERNAME }}/interactive-form:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/interactive-form:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start EC2 instance
        env:
          INSTANCE_NAME: ${{ secrets.EC2_INSTANCE_NAME }}
        run: |
          echo "Looking for EC2 instance with Name tag: $INSTANCE_NAME"

          # Get the Instance ID
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$INSTANCE_NAME" --query "Reservations[0].Instances[0].InstanceId" --output text)
          
          # Check if INSTANCE_ID was retrieved
          if [ -z "$INSTANCE_ID" ]; then
            echo "Error: Could not find EC2 instance with Name tag: $INSTANCE_NAME"
            exit 1
          fi

          echo "Found EC2 instance with ID: $INSTANCE_ID"

          # Start the EC2 instance
          aws ec2 start-instances --instance-ids $INSTANCE_ID

          # Wait for the instance to be running
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID

          # Get the Public IP
          INSTANCE_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "INSTANCE_IP: $INSTANCE_IP"
          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV

      - name: Wait for EC2 to be accessible
        run: |
          echo "Waiting for the EC2 instance to be accessible via SSH..."

          # Add a delay to allow the instance to fully boot up
          sleep 60

          for i in {1..10}; do
            ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i /tmp/ec2_key.pem ${{ secrets.EC2_USER }}@$INSTANCE_IP 'echo SSH connection established' && break
            sleep 10
          done

      - name: Deploy to EC2
        env:
          DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/interactive-form:latest
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "$SSH_KEY" > /tmp/ec2_key.pem
          chmod 600 /tmp/ec2_key.pem

          ssh -o StrictHostKeyChecking=no -i /tmp/ec2_key.pem ${{ secrets.EC2_USER }}@$INSTANCE_IP << EOF
            docker pull $DOCKER_IMAGE
            docker stop web || true
            docker rm web || true
            docker run -d --name web -p 3000:3000 $DOCKER_IMAGE
          EOF